package org.example.threadPool;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class Server {
    private final ExecutorService threadPool;

    private void log(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        System.out.println("[" + timestamp + "] " + message);
    }

    public void handleClient(Socket clientSocket) {
        try (
                BufferedReader fromClient = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter toClient = new PrintWriter(clientSocket.getOutputStream())
        ) {
            String requestLine = fromClient.readLine();

            log("Request from " + clientSocket.getRemoteSocketAddress() + ": " + requestLine);

            if (requestLine != null && requestLine.startsWith("GET")) {
//                String htmlResponse = "<html><head><title>My Java Server</title></head><body><h1>Hello from your Java Web Server!</h1><p>This page was served at " + LocalDateTime.now() + "</p></body></html>";
                String htmlResponse =
                        "<!DOCTYPE html>" +
                                "<html lang='en'>" +
                                "<head>" +
                                "<meta charset='UTF-8'>" +
                                "<meta name='viewport' content='width=device-width, initial-scale=1.0'>" +
                                "<title>Java Web Server</title>" +
                                "<style>" +
                                "body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f0f2f5; }" +
                                ".container { text-align: center; background-color: white; padding: 40px; border-radius: 12px; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); }" +
                                "h1 { color: #1c1e21; font-size: 2.5em; margin-bottom: 10px; }" +
                                "p { color: #606770; font-size: 1.1em; }" +
                                ".status { display: inline-block; padding: 8px 15px; background-color: #e7f3ff; color: #1877f2; border-radius: 20px; font-weight: 600; margin-top: 20px; }" +
                                ".status span { display: inline-block; width: 10px; height: 10px; background-color: #31a24c; border-radius: 50%; margin-right: 8px; animation: pulse 1.5s infinite; }" +
                                "@keyframes pulse { 0% { transform: scale(0.9); } 50% { transform: scale(1.1); } 100% { transform: scale(0.9); } }" +
                                "</style>" +
                                "</head>" +
                                "<body>" +
                                "<div class='container'>" +
                                "<h1>Java Web Server</h1>" +
                                "<p>This response was generated by a high-performance, multi-threaded server.</p>" +
                                "<div class='status'><span></span>Server is Online</div>" +
                                "</div>" +
                                "</body>" +
                                "</html>";

                toClient.println("HTTP/1.1 200 OK");
                toClient.println("Content-Type: text/html");
                toClient.println("Content-Length: " + htmlResponse.length());
                toClient.println("Server: Karan's Simple Java Server");

                toClient.println();

                toClient.println(htmlResponse);
            } else {
                String errorResponse = "<html><body><h1>400 Bad Request</h1></body></html>";
                toClient.println("HTTP/1.1 400 Bad Request");
                toClient.println("Content-Type: text/html");
                toClient.println("Content-Length: " + errorResponse.length());
                toClient.println();
                toClient.println(errorResponse);
            }
        } catch (IOException e) {
            log("Error handling client: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public Server() {
        int corePoolSize = 5;
        int maxPoolSize = 50;
        long keepAliveTime = 60;

        ArrayBlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<>(100);
        ThreadPoolExecutor.CallerRunsPolicy rejectionPolicy = new ThreadPoolExecutor.CallerRunsPolicy();

        this.threadPool = new ThreadPoolExecutor(
                corePoolSize,
                maxPoolSize,
                keepAliveTime,
                TimeUnit.SECONDS,
                workQueue,
                rejectionPolicy
        );
        log("Thread Pool Server configured and ready.");
    }

    public void run() throws IOException {
        int port = 8010;
        try {
            ServerSocket serverSocket = new ServerSocket(port);
            log("Server is listening on port: " + port);
            while (true) {
                Socket clientSocket = serverSocket.accept();
                threadPool.execute(() -> handleClient(clientSocket));
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Server server = new Server();

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.out.println("Shutdown signal received, shutting down server...");
            server.threadPool.shutdown();
            try {
                if (!server.threadPool.awaitTermination(60, TimeUnit.SECONDS)) {
                    server.threadPool.shutdownNow();
                }
            } catch (InterruptedException ie) {
                server.threadPool.shutdownNow();
                Thread.currentThread().interrupt();
            }
            System.out.println("Server shut down.");
        }));

        try {
            server.run();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
